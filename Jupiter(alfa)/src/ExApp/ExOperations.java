package ExApp;


/**
* ExApp/ExOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Ex.idl
* lunes 7 de noviembre de 2011 20H31' CST
*/

public interface ExOperations 
{
  /**
  * Función que permite obtener los datos del usuario con solo mandar su usuario (user) y su contraseña (pwd).
  * @param user Es el "username" de cada usuario.
  * @param pwd Es la contraseña del usuario, que posteriormente es encriptada para mayor seguridad con (MD5).
  * @return Un vector de tipo cadena con los datos del usuario, si es que el user y la pwd son correctos. De lo contrario regresa un vector vacío.
  */
  String[] Login (String user, String pwd);
  
  /**
   * Función que permite obtener los datos del usuario con solo mandar el id de dicho usuario y el estado.
   * @param id Número único del usuario, que será buscado en la BD.
   * @param estado Siendo 1, un usuario activo; y 0, un usuario inactivo.
   * @return Un vector de tipo cadena con los datos del usuario, si es que concuerda el id con el estado ingresado. De lo contrario regresa un vector vacío.
   */
  String[] ObtenerUsuarioPorID (int id, byte estado);
  
  /**
   * Función que permite obtener los datos de uno o más usuarios que esten asignados a una tarea.
   * @param id Número único de la tarea, que será buscada en la BD.
   * @return Una matriz de tipo cadena con los datos de los usuarios que concuerden con el id de la tarea. De lo contrario regresa una matriz vacía.
   */
  String[][] ObtenerUsuarioPorTarea (int id);
  
  /**
   * Función que permite modificar la contraseña del usuario.
   * @param id Número único del usuario, que será buscado en la BD.
   * @param oldPwd Es la contraseña actual del usuario.
   * @param newPwd Es la nueva contraseña que desea el usuario.
   * @return True si pudo modificar la contraseña del usuario. False si ocurrió un error al tratar de modificar dicha contraseña.
   */
  boolean ModificarUsuarioPwd (int id, String oldPwd, String newPwd);
  
  /**
   * Función que permite obtener los proyectos del usuario.
   * @param id Número único del usuario, que será buscado en la BD.
   * @param admin Si es True, obtendrá los proyectos que el administrador (lider) haya creado en base al id (usuario) ingresado. Si es False, obtendrá los proyectos en los que el usuario (normal) está trabajando.
   * @return Una matriz de tipo cadena con todos los proyectos (y sus datos c/u). De no existir proyectos, regresa una matríz vacía.
   */
  String[][] ObtenerMisProyectos (int id, boolean admin);
  
  /**
   * Función que permite obtener las tareas del usuario.
   * @param id Número unico del proyecto, que será buscado en la BD.
   * @param admin Si es True, obtendrá las tareas que el administrador (lider) haya creado en base al id (proyecto) ingresado. Si es False, obtendrá las tareas en los que el usuario (normal) está trabajando.
   * @return Una matriz de tipo cadena con todas las tareas (y sus datos c/u). De no existir tareas, regresa una matríz vacía.
   */
  String[][] ObtenerMisTareas (int id, boolean admin);
  
  /**
   * Función que permite dar de alta ya sea un proyecto, una tarea, o un usuario.
   * @param datos Vector de tipo cadena con los datos del proyecto, tarea, o usuario.
   * @param tabla Si es 1, la tabla es "Proyectos. Si es 2, la tabla es "Tareas". Si es 3, la tabla es "Usuarios".
   * @return True si guardó el proyecto, la tarea, o el usuario. False si ocurrió un error al tratar de dar de alta.
   */
  boolean Crear (String[] datos, byte tabla);
  
  /**
   * Función que permite obtener todos los registros de la tabla de la BD.
   * @param busqueda Cadena que se buscará en los registros de la tabla. Si está vacía, regresará todos los registros.
   * @param estado Si es 1, obtendrá registros activos. Si es 0, obtendrá registos inactivos.
   * @param tabla Si es 1, la tabla es "Proyectos. Si es 2, la tabla es "Tareas". Si es 3, la tabla es "Usuarios".
   * @return Matriz de tipo cadena con todos los registros de la tabla seleccionada con el estado seleccionad. De no existir ningún dato de dicha tabla con dicho estado, regresará una matríz vacía.
   */
  String[][] Obtener (String busqueda, byte estado, byte tabla);
  
  /**
   * Función que permite modificar ya sea un proyecto, una tarea, o un usuario ya existente.
   * @param id Número único ya sea del proyecto, tarea, o usuario que se será buscado en la BD.
   * @param datos Vector de tipo cadena, con los datos nuevos del proyecto, tarea, o usuario.
   * @param tabla Si es 1, la tabla es "Proyectos. Si es 2, la tabla es "Tareas". Si es 3, la tabla es "Usuarios".
   * @return True si modificó el proyecto, la tarea, o el usuario. False si ocurrió un error al tratar de modificar.
   */
  boolean Modificar (int id, String[] datos, byte tabla);
  
  /**
   * Función que permite restaurar un proyecto, una tarea, o un usuario con estado 0, es decir, que el registro se encuentre en la papelera.
   * @param id Número único ya sea del proyecto, tarea, o usuario que será buscado en la BD.
   * @param tabla Si es 1, la tabla es "Proyectos. Si es 2, la tabla es "Tareas". Si es 3, la tabla es "Usuarios".
   * @return True si restauró el proyecto, la tarea, o el usuario. False si ocurrió un error al tratar de restaurar.
   */
  boolean Restaurar (int id, byte tabla);
  
  /**
   * Función que permite eliminar o enviar a la papelera un proyecto, tarea, o usuario de la BD.
   * @param id Número único ya sea del proyecto, tarea, o usuario que será buscado en la BD.
   * @param permanente Si es True, entonces el registro será eliminado (no podrá recuperarse posteriormente). Si es False, entonces el registro será enviado a la papelera (se podrá restaurarse posteriormente).
   * @param tabla Si es 1, la tabla es "Proyectos. Si es 2, la tabla es "Tareas". Si es 3, la tabla es "Usuarios".
   * @return True si eliminó o envió a la papelera el proyecto, la tarea, o el usuario. False si ocurrió un error al tratar de eliminar o enviar a la papelera.
   */
  boolean Eliminar (int id, boolean permanente, byte tabla);
} // interface ExOperations
